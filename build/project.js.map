{"version":3,"file":"project.js","sources":["../source/types.ts","../source/config.ts","../source/bash/index.ts","../source/install.ts","../source/project-php-laravel.ts","../source/project.ts"],"sourcesContent":["export enum Command {\n    help = 'help',\n    project = 'project'\n}\n\nexport enum CommandDescription {\n    help = 'list commands',\n    project = 'create a new project'\n}\n\nexport enum Project {\n    phpLaravel = 'php-laravel'\n}\n\nexport enum ProjectDescription {\n    phpLaravel = 'PHP Laravel'\n}\n\nexport enum ProjectExample {\n    phpLaravel = 'vamtiger project --type php-laravel php-laravel-project'\n}\n\nexport enum Result {\n    createdProject = 'Created Project',\n    ignored = 'Ignored'\n}\n\nexport enum Prefix {\n    vamtigerProject = 'vamtiger-project',\n    doubleDash = '--'\n}\n\nexport enum StringConstant {\n    dash = '-',\n    newline = '\\n'\n}\n\nexport enum ProjectOptions {\n    type = 'type'\n}\n\nexport enum ProjectOptionsDescription {\n    type = 'Project type'\n}\n\nexport enum HiddenProjectOptions {\n    cliInstallOptional = 'cliInstallOptional'\n}\n\nexport enum Interface {\n    'api' = 'API',\n    'cli' = 'CLI'\n}\n\nexport enum PhpLaravelPath {\n    testsFeauture = 'tests/Feature',\n    behatYml = 'behat.yml'\n}\n\nexport enum CommandlineHelpTitle {\n    vamtiger = 'VAMTIGER - Web Development Utility\\nhttps://www.npmjs.com/package/vamtiger',\n    help = 'Commands:',\n    project = 'Project Options:',\n    projectType = 'Project Types:'\n}\n\nexport interface IStringObject {\n    [key: string]: string;\n}\n\nexport interface IProject {\n    type: Project;\n    name: string;\n    project?: string;\n    destination?: string;\n    cli?: boolean;\n    cliInstallOptional?: boolean;\n}\n\nexport interface IProjectPhpLaravel {\n    name: string;\n    source: string;\n    destination: string;\n}\n\nexport interface IInstall {\n    projects: string[];\n    cliInstallOptional?: boolean;\n}\n\nexport interface IInstalledProject {\n    path: string;\n}\n\nexport function ignore(params: any) {\n    return Result.ignored;\n}\n\nexport const errorMessage = {\n    noProjectTypeOptionSpecified: `No --${ProjectOptions.type} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} projec-name)`,\n    noProjectNameOptionSpecified: `No Project Name specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} projec-name)`\n};","import { resolve as resolvePath } from 'path';\n\nexport const projectFolder = resolvePath(\n    __dirname,\n    '..'\n);\n\nexport const npmApiInstallOptional = {\n    'save-optional': true,\n    'no-audit': true,\n    'prefix': projectFolder\n};","export default {\"npm-install-save-optional.sh\":\"npm install --save-optional\",\"php-laravel-create-project.sh\":\"composer create-project laravel/laravel .\",\"php-laravel-install-dependencies.sh\":\"composer install\",\"php-laravel-install-dev-dependencies.sh\":\"composer require --dev behat/behat\",\"php-laravel-is-composer-installed.sh\":\"command -v composer\"};","import * as npm from 'npm';\nimport bash from 'vamtiger-bash';\nimport {\n    IInstall\n} from './types';\nimport {\n    npmApiInstallOptional,\n    projectFolder\n} from './config';\nimport bashScript from './bash';\n\nexport default function (params: IInstall) {\n    const {\n        cliInstallOptional: cliOptional } = params;\n    const currentInstall = cliOptional ? cliInstallOptional\n        : apiInstall;\n\n    return currentInstall(params);\n}\n\nasync function cliInstallOptional(params: IInstall) {\n    const { projects } = params;\n    const currentProjects = projects.join(' ');\n    const command = `${bashScript['npm-install-save-optional.sh'].trim()} --prefix ${projectFolder} ${currentProjects}`;\n    const result = await bash(command).catch(error => error);\n\n    return result.toString();\n}\n\nfunction apiInstall(params: IInstall) {return new Promise((resolve, reject) => {\n    const { projects } = params;\n\n    npm.load(npmApiInstallOptional, (error, loadData) => {\n        if (error) {\n            reject(error);\n        } else {\n            npm.commands.install(projects, (error, installData) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve({\n                        loadData,\n                        installData\n                    });\n                }\n            });\n        }\n    });\n})}","import { resolve as resolvePath } from 'path';\nimport {copy} from 'vamtiger-copy';\nimport copyFile from 'vamtiger-copy-file';\nimport bash from 'vamtiger-bash';\nimport getFolderContent from 'vamtiger-get-directory-content';\nimport createFolder from 'vamtiger-create-directory';\nimport remove from 'vamtiger-remove';\nimport {\n    IProject,\n    IInstalledProject,\n    IProjectPhpLaravel,\n    PhpLaravelPath } from './types';\nimport bashScript from './bash';\n\nexport default async function (params: IProject) {\n    const {\n        project,\n        name: projectFolder = '',\n        destination = process.cwd(),\n        cli = false\n    } = params;\n    const { path: source }: IInstalledProject = project && require(project)\n        || { path: '' };\n    const folderContent = await getFolderContent(destination);\n    const currentDestination = projectFolder &&\n        resolvePath(\n            destination,\n            projectFolder\n        )\n        ||\n        destination;\n    const composerIsInstalled = await bash(bashScript['php-laravel-is-composer-installed.sh'])\n        .then(output => Boolean(output.toString().trim()));\n    const copyParams = {\n        source,\n        destination: currentDestination\n    }\n\n    if (!folderContent.includes(projectFolder)) {\n        await createFolder(currentDestination);\n    }\n\n    if (composerIsInstalled) {\n        await createProjectWithComposer({\n            name: projectFolder,\n            source,\n            destination: currentDestination\n        });\n    } else {\n        await copy(copyParams);\n    }\n}\n\nasync function createProjectWithComposer(params: IProjectPhpLaravel) {\n    const {\n        source,\n        destination: cwd\n        } = params;\n    const sourceTestsFeaturesFolder = resolvePath(\n        source,\n        PhpLaravelPath.testsFeauture\n    );\n    const sourceBehatYml = resolvePath(\n        source,\n        PhpLaravelPath.behatYml\n    );\n    const destinationBehatYml = resolvePath(\n        cwd,\n        PhpLaravelPath.behatYml\n    );\n    const destinationTestFeaturesFolder = resolvePath(\n        cwd,\n        PhpLaravelPath.testsFeauture\n    );\n    const bashOptions = {\n        cwd\n    };\n    const creatProject = await Promise.all([\n        bash(\n            bashScript['php-laravel-create-project.sh'],\n            bashOptions\n        ).catch(error => error)\n    ]);\n    const installDevDependencies = await bash(\n        bashScript['php-laravel-install-dev-dependencies.sh'],\n        bashOptions\n    ).catch(error => error);\n    const removeTests = await remove({\n        folder: destinationTestFeaturesFolder\n    }).catch((error: any) => error);\n    const copyTests = await copy({\n        source: sourceTestsFeaturesFolder,\n        destination: destinationTestFeaturesFolder\n    }).catch((error: any) => error);\n    const copyBehatYml = await copyFile({\n        source: sourceBehatYml,\n        destination: destinationBehatYml\n    });\n    const result = {\n        creatProject: creatProject.toString(),\n        installDevDependencies: installDevDependencies.toString(),\n        removeTests,\n        copyTests,\n        copyBehatYml\n    };\n\n    return result;\n}","import {\n    IProject,\n    Project,\n    CommandlineHelpTitle,\n    Prefix,\n    StringConstant,\n    Result,\n    ignore\n} from './types';\nimport install from './install';\nimport phpLaravel from './project-php-laravel'\n\nconst createProject = {\n    [Project.phpLaravel]: phpLaravel\n}\n\nexport default async function (params: IProject) {\n    const { cliInstallOptional = false , cli = false } = params;\n    const cliMessage = cli && [\n        CommandlineHelpTitle.vamtiger,\n        '',\n        Result.createdProject,\n    ].join(StringConstant.newline);\n    const createCurrentProject = createProject[params.type] || ignore;\n    const project = [\n        Prefix.vamtigerProject,\n        params.type\n    ].join(StringConstant.dash);\n    const installParams = createCurrentProject && {\n        projects: [project],\n        cliInstallOptional: cliInstallOptional || cli\n    };\n\n    if (installParams) {\n        await install(installParams);\n    }\n\n    await createCurrentProject({...params, project});\n\n    if (cliMessage) {\n        console.log(cliMessage);\n    }\n\n    return Result.createdProject;\n}"],"names":["Command","CommandDescription","Project","ProjectDescription","ProjectExample","Result","Prefix","StringConstant","ProjectOptions","ProjectOptionsDescription","HiddenProjectOptions","Interface","PhpLaravelPath","CommandlineHelpTitle","ignore","params","ignored","errorMessage","noProjectTypeOptionSpecified","type","vamtigerProject","project","phpLaravel","noProjectNameOptionSpecified","projectFolder","resolvePath","__dirname","npmApiInstallOptional","save-optional","no-audit","prefix","npm-install-save-optional.sh","php-laravel-create-project.sh","php-laravel-install-dependencies.sh","php-laravel-install-dev-dependencies.sh","php-laravel-is-composer-installed.sh","cliInstallOptional","cliOptional","apiInstall","async","projects","currentProjects","join","command","bashScript","trim","bash","catch","error","toString","Promise","resolve","reject","npm.load","loadData","npm.commands","install","installData","name","destination","process","cwd","cli","path","source","require","folderContent","getFolderContent","currentDestination","composerIsInstalled","then","output","Boolean","copyParams","includes","createFolder","createProjectWithComposer","copy","sourceTestsFeaturesFolder","testsFeauture","sourceBehatYml","behatYml","destinationBehatYml","destinationTestFeaturesFolder","bashOptions","creatProject","all","installDevDependencies","removeTests","remove","folder","copyTests","copyBehatYml","copyFile","createProject","[object Object]","cliMessage","vamtiger","createdProject","newline","createCurrentProject","dash","installParams","console","log"],"mappings":"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"}
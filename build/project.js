"use strict";var Command,Project,Result,Prefix,StringConstant,ProjectOptions,Interface,vamtigerCopy=require("vamtiger-copy");function ignore(e){return Result.ignored}!function(e){e.project="project"}(Command||(Command={})),function(e){e.phpLaravel="php-laravel"}(Project||(Project={})),function(e){e.createdProject="Created Project",e.ignored="Ignored"}(Result||(Result={})),function(e){e.vamtigerProject="vamtiger-project"}(Prefix||(Prefix={})),function(e){e.dash="-"}(StringConstant||(StringConstant={})),function(e){e.type="type",e.name="name"}(ProjectOptions||(ProjectOptions={})),function(e){e.api="API",e.cli="CLI"}(Interface||(Interface={}));const errorMessage={noProjectTypeOptionSpecified:`No --${ProjectOptions.type} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`,noProjectNameOptionSpecified:`No --${ProjectOptions.name} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`},npm=require("npm"),loadParams={loglevel:"silent",progress:!1};function install(e){return new Promise((t,o)=>{const{project:r}=e;npm.load(loadParams,(e,n)=>{e?o(e):npm.commands.install([r],(e,r)=>{e?o(e):t({loadData:n,installData:r})})})})}const createProject={[Project.phpLaravel]:createPhpLaravelProject};async function project(e){const t=createProject[e.type]||ignore,o=[Prefix.vamtigerProject,e.type].join(StringConstant.dash),r=t&&{project:o};return r&&await install(r),t(Object.assign(Object.assign({},e),{project:o}))}async function createPhpLaravelProject(e){const{project:t,destination:o=process.cwd(),cli:r=!1}=e,{path:n}=t&&require(t)||{path:""},c={source:n,destination:o};return await vamtigerCopy.copy(c),r&&console.log(Result.createdProject),Result.createdProject}module.exports=project;
//# sourceMappingURL=project.js.map

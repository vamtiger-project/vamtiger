{"version":3,"file":"vamtiger.js","sources":["../source/types.ts","../source/config.ts","../source/bash/index.ts","../source/install.ts","../source/project-php-laravel.ts","../source/project.ts","../source/vamtiger.ts"],"sourcesContent":["export enum Command {\n    project = 'project'\n}\n\nexport enum Project {\n    phpLaravel = 'php-laravel'\n}\n\nexport enum Result {\n    createdProject = 'Created Project',\n    ignored = 'Ignored'\n}\n\nexport enum Prefix {\n    vamtigerProject = 'vamtiger-project'\n}\n\nexport enum StringConstant {\n    dash = '-'\n}\n\nexport enum ProjectOptions {\n    type = 'type',\n    name = 'name'\n}\n\nexport enum HiddenProjectOptions {\n    cliInstallOptional = 'cliInstallOptional'\n}\n\nexport enum Interface {\n    'api' = 'API',\n    'cli' = 'CLI'\n}\n\nexport enum PhpLaravelPath {\n    testsFeauture = 'tests/Feature',\n    behatYml = 'behat.yml'\n}\nexport interface IProject {\n    type: Project;\n    name: string;\n    project?: string;\n    destination?: string;\n    cli?: boolean;\n    cliInstallOptional?: boolean;\n}\n\nexport interface IProjectPhpLaravel {\n    name: string;\n    source: string;\n    destination: string;\n}\n\nexport interface IInstall {\n    projects: string[];\n    cliInstallOptional?: boolean;\n}\n\nexport interface IInstalledProject {\n    path: string;\n}\n\nexport function ignore(params: any) {\n    return Result.ignored;\n}\n\nexport const errorMessage = {\n    noProjectTypeOptionSpecified: `No --${ProjectOptions.type} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`,\n    noProjectNameOptionSpecified: `No --${ProjectOptions.name} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`\n};","import { resolve as resolvePath } from 'path';\n\nexport const projectFolder = resolvePath(\n    __dirname,\n    '..'\n);\n\nexport const npmApiInstallOptional = {\n    'save-optional': true,\n    'prefix': projectFolder\n};","export default {\"npm-install-save-optional.sh\":\"npm install --save-optional\",\"php-laravel-create-project.sh\":\"composer create-project laravel/laravel .\",\"php-laravel-install-dependencies.sh\":\"composer install\",\"php-laravel-install-dev-dependencies.sh\":\"composer require --dev behat/behat\",\"php-laravel-is-composer-installed.sh\":\"command -v composer\"};","import * as npm from 'npm';\nimport bash from 'vamtiger-bash';\nimport {\n    IInstall\n} from './types';\nimport {\n    npmApiInstallOptional\n} from './config';\nimport bashScript from './bash';\n\nexport default function (params: IInstall) {\n    const {\n        cliInstallOptional: cliOptional } = params;\n    const currentInstall = cliOptional ? cliInstallOptional\n        : apiInstall;\n\n    return currentInstall(params);\n}\n\nasync function cliInstallOptional(params: IInstall) {\n    const { projects } = params;\n    const currentProjects = projects.join(' ');\n    const command = `${bashScript['npm-install-save-optional.sh'].trim()} ${currentProjects}`;\n    const result = await bash(command);\n\n    return result.toString();\n}\n\nfunction apiInstall(params: IInstall) {return new Promise((resolve, reject) => {\n    const { projects } = params;\n\n    npm.load(npmApiInstallOptional, (error, loadData) => {\n        if (error) {\n            reject(error);\n        } else {\n            npm.commands.install(projects, (error, installData) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve({\n                        loadData,\n                        installData\n                    });\n                }\n            });\n        }\n    });\n})}","import { resolve as resolvePath } from 'path';\nimport {copy} from 'vamtiger-copy';\nimport copyFile from 'vamtiger-copy-file';\nimport bash from 'vamtiger-bash';\nimport getFolderContent from 'vamtiger-get-directory-content';\nimport createFolder from 'vamtiger-create-directory';\nimport remove from 'vamtiger-remove';\nimport {\n    IProject,\n    IInstalledProject,\n    IProjectPhpLaravel,\n    Result,\n    PhpLaravelPath } from './types';\nimport bashScript from './bash';\n\nexport default async function (params: IProject) {\n    const {\n        project,\n        name: projectFolder = '',\n        destination = process.cwd(),\n        cli = false\n    } = params;\n    const { path: source }: IInstalledProject = project && require(project)\n        || { path: '' };\n    const folderContent = await getFolderContent(destination);\n    const currentDestination = projectFolder &&\n        resolvePath(\n            destination,\n            projectFolder\n        )\n        ||\n        destination;\n    const composerIsInstalled = await bash(bashScript['php-laravel-is-composer-installed.sh'])\n        .then(output => Boolean(output.toString().trim()));\n    const copyParams = {\n        source,\n        destination: currentDestination\n    }\n\n    if (!folderContent.includes(projectFolder)) {\n        await createFolder(currentDestination);\n    }\n\n    if (composerIsInstalled) {\n        await createProjectWithComposer({\n            name: projectFolder,\n            source,\n            destination: currentDestination\n        });\n    } else {\n        await copy(copyParams);\n    }\n\n    if (cli) {\n        console.log(Result.createdProject);\n    }\n\n    return Result.createdProject;\n}\n\nasync function createProjectWithComposer(params: IProjectPhpLaravel) {\n    const {\n        source,\n        destination: cwd\n        } = params;\n    const sourceTestsFeaturesFolder = resolvePath(\n        source,\n        PhpLaravelPath.testsFeauture\n    );\n    const sourceBehatYml = resolvePath(\n        source,\n        PhpLaravelPath.behatYml\n    );\n    const destinationBehatYml = resolvePath(\n        cwd,\n        PhpLaravelPath.behatYml\n    );\n    const destinationTestFeaturesFolder = resolvePath(\n        cwd,\n        PhpLaravelPath.testsFeauture\n    );\n    const bashOptions = {\n        cwd\n    };\n    const creatProject = await Promise.all([\n        bash(\n            bashScript['php-laravel-create-project.sh'],\n            bashOptions\n        ).catch(error => error)\n    ]);\n    const installDevDependencies = await bash(\n        bashScript['php-laravel-install-dev-dependencies.sh'],\n        bashOptions\n    ).catch(error => error);\n    const removeTests = await remove({\n        folder: destinationTestFeaturesFolder\n    }).catch((error: any) => error);\n    const copyTests = await copy({\n        source: sourceTestsFeaturesFolder,\n        destination: destinationTestFeaturesFolder\n    }).catch((error: any) => error);\n    const copyBehatYml = await copyFile({\n        source: sourceBehatYml,\n        destination: destinationBehatYml\n    });\n    const result = {\n        creatProject: creatProject.toString(),\n        installDevDependencies: installDevDependencies.toString(),\n        removeTests,\n        copyTests,\n        copyBehatYml\n    };\n\n    return result;\n}","import {\n    IProject,\n    Project,\n    Prefix,\n    StringConstant,\n    ignore\n} from './types';\nimport install from './install';\nimport phpLaravel from './project-php-laravel'\n\nconst createProject = {\n    [Project.phpLaravel]: phpLaravel\n}\n\nexport default async function (params: IProject) {\n    const { cliInstallOptional = false } = params;\n    const createCurrentProject = createProject[params.type] || ignore;\n    const project = [\n        Prefix.vamtigerProject,\n        params.type\n    ].join(StringConstant.dash);\n    const installParams = createCurrentProject && {\n        projects: [project],\n        cliInstallOptional\n    };\n\n    if (installParams) {\n        await install(installParams);\n    }\n\n    return createCurrentProject({...params, project});\n}","import Args from 'vamtiger-argv/build/main';\nimport {\n    Command,\n    ProjectOptions,\n    Project,\n    ignore,\n    errorMessage\n} from './types';\nimport project from './project';\n\nconst args = new Args();\nconst { 2: commandArg } = args.raw;\nconst commands = {\n    [Command.project]: handleProject\n}\nconst command = commands[commandArg as Command] || ignore;\n\ncommand();\n\nfunction handleProject() {\n    const type = args.get(ProjectOptions.type) as Project || '';\n    const name = args.get(ProjectOptions.name) || '';\n    const projectParams = type && name && {\n        type,\n        name,\n        cli: true\n    }\n\n    if (!type) {\n        throw new Error(errorMessage.noProjectTypeOptionSpecified);\n    } else if (!name) {\n        throw new Error(errorMessage.noProjectNameOptionSpecified);\n    } else if (projectParams) {\n        return project(projectParams);\n    }\n}"],"names":["Command","Project","Result","Prefix","StringConstant","ProjectOptions","HiddenProjectOptions","Interface","PhpLaravelPath","ignore","params","ignored","errorMessage","noProjectTypeOptionSpecified","type","vamtigerProject","project","phpLaravel","name","noProjectNameOptionSpecified","projectFolder","resolvePath","__dirname","npmApiInstallOptional","save-optional","prefix","npm-install-save-optional.sh","php-laravel-create-project.sh","php-laravel-install-dependencies.sh","php-laravel-install-dev-dependencies.sh","php-laravel-is-composer-installed.sh","cliInstallOptional","cliOptional","apiInstall","async","projects","currentProjects","join","command","bashScript","trim","bash","toString","Promise","resolve","reject","npm.load","error","loadData","npm.commands","install","installData","destination","process","cwd","cli","path","source","require","folderContent","getFolderContent","currentDestination","composerIsInstalled","then","output","Boolean","copyParams","includes","createFolder","createProjectWithComposer","copy","console","log","createdProject","sourceTestsFeaturesFolder","testsFeauture","sourceBehatYml","behatYml","destinationBehatYml","destinationTestFeaturesFolder","bashOptions","creatProject","all","catch","installDevDependencies","removeTests","remove","folder","copyTests","copyBehatYml","copyFile","createProject","[object Object]","createCurrentProject","dash","installParams","args","Args","2","commandArg","raw","commands","handleProject","get","projectParams","Error"],"mappings":"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"}
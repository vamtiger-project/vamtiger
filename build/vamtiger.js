#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var Command,Project,Result,Prefix,StringConstant,ProjectOptions,HiddenProjectOptions,Interface,PhpLaravelPath,path=require("path"),npm=require("npm"),bash=_interopDefault(require("vamtiger-bash")),vamtigerCopy=require("vamtiger-copy"),copyFile=_interopDefault(require("vamtiger-copy-file")),getFolderContent=_interopDefault(require("vamtiger-get-directory-content")),createFolder=_interopDefault(require("vamtiger-create-directory")),remove=_interopDefault(require("vamtiger-remove")),Args=_interopDefault(require("vamtiger-argv/build/main"));function ignore(e){return Result.ignored}!function(e){e.project="project"}(Command||(Command={})),function(e){e.phpLaravel="php-laravel"}(Project||(Project={})),function(e){e.createdProject="Created Project",e.ignored="Ignored"}(Result||(Result={})),function(e){e.vamtigerProject="vamtiger-project"}(Prefix||(Prefix={})),function(e){e.dash="-"}(StringConstant||(StringConstant={})),function(e){e.type="type",e.name="name"}(ProjectOptions||(ProjectOptions={})),function(e){e.cliInstallOptional="cliInstallOptional"}(HiddenProjectOptions||(HiddenProjectOptions={})),function(e){e.api="API",e.cli="CLI"}(Interface||(Interface={})),function(e){e.testsFeauture="tests/Feature",e.behatYml="behat.yml"}(PhpLaravelPath||(PhpLaravelPath={}));const errorMessage={noProjectTypeOptionSpecified:`No --${ProjectOptions.type} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`,noProjectNameOptionSpecified:`No --${ProjectOptions.name} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`},projectFolder=path.resolve(__dirname,".."),npmApiInstallOptional={"save-optional":!0,prefix:projectFolder};var bashScript={"npm-install-save-optional.sh":"npm install --save-optional","php-laravel-create-project.sh":"composer create-project laravel/laravel .","php-laravel-install-dependencies.sh":"composer install","php-laravel-install-dev-dependencies.sh":"composer require --dev behat/behat","php-laravel-is-composer-installed.sh":"command -v composer"};function install(e){const{cliInstallOptional:t}=e;return(t?cliInstallOptional:apiInstall)(e)}async function cliInstallOptional(e){const{projects:t}=e,a=t.join(" "),r=`${bashScript["npm-install-save-optional.sh"].trim()} ${a}`;return(await bash(r)).toString()}function apiInstall(e){return new Promise((t,a)=>{const{projects:r}=e;npm.load(npmApiInstallOptional,(e,o)=>{e?a(e):npm.commands.install(r,(e,r)=>{e?a(e):t({loadData:o,installData:r})})})})}async function phpLaravel(e){const{project:t,name:a="",destination:r=process.cwd(),cli:o=!1}=e,{path:n}=t&&require(t)||{path:""},i=await getFolderContent(r),c=a&&path.resolve(r,a)||r,p=await bash(bashScript["php-laravel-is-composer-installed.sh"]).then(e=>Boolean(e.toString().trim())),s={source:n,destination:c};return i.includes(a)||await createFolder(c),p?await createProjectWithComposer({name:a,source:n,destination:c}):await vamtigerCopy.copy(s),o&&console.log(Result.createdProject),Result.createdProject}async function createProjectWithComposer(e){const{source:t,destination:a}=e,r=path.resolve(t,PhpLaravelPath.testsFeauture),o=path.resolve(t,PhpLaravelPath.behatYml),n=path.resolve(a,PhpLaravelPath.behatYml),i=path.resolve(a,PhpLaravelPath.testsFeauture),c={cwd:a},p=await Promise.all([bash(bashScript["php-laravel-create-project.sh"],c).catch(e=>e)]),s=await bash(bashScript["php-laravel-install-dev-dependencies.sh"],c).catch(e=>e),l=await remove({folder:i}).catch(e=>e),m=await vamtigerCopy.copy({source:r,destination:i}).catch(e=>e),h=await copyFile({source:o,destination:n});return{creatProject:p.toString(),installDevDependencies:s.toString(),removeTests:l,copyTests:m,copyBehatYml:h}}const createProject={[Project.phpLaravel]:phpLaravel};async function project(e){const{cliInstallOptional:t=!1}=e,a=createProject[e.type]||ignore,r=[Prefix.vamtigerProject,e.type].join(StringConstant.dash),o=a&&{projects:[r],cliInstallOptional:t};return o&&await install(o),a(Object.assign(Object.assign({},e),{project:r}))}const args=new Args,{2:commandArg}=args.raw,commands={[Command.project]:handleProject},command=commands[commandArg]||ignore;function handleProject(){const e=args.get(ProjectOptions.type)||"",t=args.get(ProjectOptions.name)||"",a=e&&t&&{type:e,name:t,cli:!0};if(!e)throw new Error(errorMessage.noProjectTypeOptionSpecified);if(!t)throw new Error(errorMessage.noProjectNameOptionSpecified);if(a)return project(a)}command();
//# sourceMappingURL=vamtiger.js.map

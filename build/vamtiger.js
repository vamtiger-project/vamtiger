#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var Command,Project,Result,Prefix,StringConstant,ProjectOptions,Interface,vamtigerCopy=require("vamtiger-copy"),Args=_interopDefault(require("vamtiger-argv/build/main"));function ignore(e){return Result.ignored}!function(e){e.project="project"}(Command||(Command={})),function(e){e.phpLaravel="php-laravel"}(Project||(Project={})),function(e){e.createdProject="Created Project",e.ignored="Ignored"}(Result||(Result={})),function(e){e.vamtigerProject="vamtiger-project"}(Prefix||(Prefix={})),function(e){e.dash="-"}(StringConstant||(StringConstant={})),function(e){e.type="type",e.name="name"}(ProjectOptions||(ProjectOptions={})),function(e){e.api="API",e.cli="CLI"}(Interface||(Interface={}));const errorMessage={noProjectTypeOptionSpecified:`No --${ProjectOptions.type} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`,noProjectNameOptionSpecified:`No --${ProjectOptions.name} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} --${ProjectOptions.name} projec-name)`},devnull=require("dev-null"),loadParams={loglevel:"silent",progress:!1};function install(e){return new Promise((t,r)=>{const{project:o}=e;npm.load(loadParams,(e,n)=>{e?r(e):npm.commands.install([o],(e,o)=>{e?r(e):t({loadData:n,installData:o})})})})}const createProject={[Project.phpLaravel]:createPhpLaravelProject};async function project(e){const t=createProject[e.type]||ignore,r=[Prefix.vamtigerProject,e.type].join(StringConstant.dash),o=t&&{project:r};return o&&await install(o),t(Object.assign(Object.assign({},e),{project:r}))}async function createPhpLaravelProject(e){const{project:t,destination:r=process.cwd(),cli:o=!1}=e,{path:n}=t&&require(t)||{path:""},a={source:n,destination:r};return await vamtigerCopy.copy(a),o&&console.log(Result.createdProject),Result.createdProject}const args=new Args,{2:commandArg}=args.raw,commands={[Command.project]:handleProject},command=commands[commandArg]||ignore;function handleProject(){const e=args.get(ProjectOptions.type)||"",t=args.get(ProjectOptions.name)||"",r=e&&t&&{type:e,name:t,cli:!0};if(!e)throw new Error(errorMessage.noProjectTypeOptionSpecified);if(!t)throw new Error(errorMessage.noProjectNameOptionSpecified);if(r)return project(r)}command();
//# sourceMappingURL=vamtiger.js.map

#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var Command,CommandDescription,Project,ProjectDescription,ProjectExample,Result,Prefix,StringConstant,ProjectOptions,ProjectOptionsDescription,HiddenProjectOptions,Interface,PhpLaravelPath,CommandlineHelpTitle,path=require("path"),npm=require("npm"),bash=_interopDefault(require("vamtiger-bash")),vamtigerCopy=require("vamtiger-copy"),copyFile=_interopDefault(require("vamtiger-copy-file")),getFolderContent=_interopDefault(require("vamtiger-get-directory-content")),createFolder=_interopDefault(require("vamtiger-create-directory")),remove=_interopDefault(require("vamtiger-remove")),Args=_interopDefault(require("vamtiger-argv/build/main")),commandLineHelp=_interopDefault(require("vamtiger-commandline-help"));function ignore(e){return Result.ignored}!function(e){e.help="help",e.project="project"}(Command||(Command={})),function(e){e.help="list commands",e.project="create a new project"}(CommandDescription||(CommandDescription={})),function(e){e.phpLaravel="php-laravel"}(Project||(Project={})),function(e){e.phpLaravel="PHP Laravel"}(ProjectDescription||(ProjectDescription={})),function(e){e.phpLaravel="vamtiger project --type php-laravel php-laravel-project"}(ProjectExample||(ProjectExample={})),function(e){e.createdProject="Created Project",e.ignored="Ignored"}(Result||(Result={})),function(e){e.vamtigerProject="vamtiger-project",e.doubleDash="--"}(Prefix||(Prefix={})),function(e){e.dash="-",e.newline="\n"}(StringConstant||(StringConstant={})),function(e){e.type="type"}(ProjectOptions||(ProjectOptions={})),function(e){e.type="Project type"}(ProjectOptionsDescription||(ProjectOptionsDescription={})),function(e){e.cliInstallOptional="cliInstallOptional"}(HiddenProjectOptions||(HiddenProjectOptions={})),function(e){e.api="API",e.cli="CLI"}(Interface||(Interface={})),function(e){e.testsFeauture="tests/Feature",e.behatYml="behat.yml"}(PhpLaravelPath||(PhpLaravelPath={})),function(e){e.vamtiger="VAMTIGER - Web Development Utility\nhttps://www.npmjs.com/package/vamtiger",e.help="Commands:",e.project="Project Options:",e.projectType="Project Types:"}(CommandlineHelpTitle||(CommandlineHelpTitle={}));const errorMessage={noProjectTypeOptionSpecified:`No --${ProjectOptions.type} option specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} projec-name)`,noProjectNameOptionSpecified:`No Project Name specified (e.g. ${Prefix.vamtigerProject} ${Command.project} --${ProjectOptions.type} ${Project.phpLaravel} projec-name)`},projectFolder=path.resolve(__dirname,".."),npmApiInstallOptional={"save-optional":!0,"no-audit":!0,prefix:projectFolder};var bashScript={"npm-install-save-optional.sh":"npm install --save-optional","php-laravel-create-project.sh":"composer create-project laravel/laravel .","php-laravel-install-dev-dependencies.sh":"composer require --dev behat/behat","php-laravel-install-dependencies.sh":"composer install","php-laravel-is-composer-installed.sh":"command -v composer"};function install(e){const{cliInstallOptional:t}=e;return(t?cliInstallOptional:apiInstall)(e)}async function cliInstallOptional(e){const{projects:t}=e,o=t.join(" "),n=`${bashScript["npm-install-save-optional.sh"].trim()} --prefix ${projectFolder} ${o}`;return(await bash(n)).toString()}function apiInstall(e){return new Promise((t,o)=>{const{projects:n}=e;npm.load(npmApiInstallOptional,(e,r)=>{e?o(e):npm.commands.install(n,(e,n)=>{e?o(e):t({loadData:r,installData:n})})})})}async function phpLaravel(e){const{project:t,name:o="",destination:n=process.cwd(),cli:r=!1}=e,{path:a}=t&&require(t)||{path:""},i=await getFolderContent(n),p=o&&path.resolve(n,o)||n,c=await bash(bashScript["php-laravel-is-composer-installed.sh"]).then(e=>Boolean(e.toString().trim())),l={source:a,destination:p};i.includes(o)||await createFolder(p),c?await createProjectWithComposer({name:o,source:a,destination:p}):await vamtigerCopy.copy(l)}async function createProjectWithComposer(e){const{source:t,destination:o}=e,n=path.resolve(t,PhpLaravelPath.testsFeauture),r=path.resolve(t,PhpLaravelPath.behatYml),a=path.resolve(o,PhpLaravelPath.behatYml),i=path.resolve(o,PhpLaravelPath.testsFeauture),p={cwd:o},c=await Promise.all([bash(bashScript["php-laravel-create-project.sh"],p).catch(e=>e)]),l=await bash(bashScript["php-laravel-install-dev-dependencies.sh"],p).catch(e=>e),s=await remove({folder:i}).catch(e=>e),m=await vamtigerCopy.copy({source:n,destination:i}).catch(e=>e),d=await copyFile({source:r,destination:a});return{creatProject:c.toString(),installDevDependencies:l.toString(),removeTests:s,copyTests:m,copyBehatYml:d}}const createProject={[Project.phpLaravel]:phpLaravel};async function project(e){const{cliInstallOptional:t=!1,cli:o=!1}=e,n=o&&["",CommandlineHelpTitle.vamtiger,"",Result.createdProject,""].join(StringConstant.newline),r=createProject[e.type]||ignore,a=[Prefix.vamtigerProject,e.type].join(StringConstant.dash),i=r&&{projects:[a],cliInstallOptional:t||o};return i&&await install(i),await r(Object.assign(Object.assign({},e),{project:a})),n&&console.log(n),Result.createdProject}const args=new Args;function project$1(){const e=args.get(ProjectOptions.type)||"",t=args.raw[args.raw.length-1],o=e&&t&&{type:e,name:t,cli:!0};if(!e)throw new Error(errorMessage.noProjectTypeOptionSpecified);if(!t)throw new Error(errorMessage.noProjectNameOptionSpecified);if(o)return project(o)}const args$1=new Args,getHelp={[Command.help]:help$1,[Command.project]:projectHelp};function help(){const{3:e}=args$1.raw,t=Command[e||Command.help],o=getHelp[t]||ignore,n=[CommandlineHelpTitle.vamtiger,"",o()].join(StringConstant.newline);return console.log(n),n}function help$1(){return[CommandlineHelpTitle.help,commandLineHelp({command:Command,description:CommandDescription})].join(StringConstant.newline)}function projectHelp(){return[CommandlineHelpTitle.project,commandLineHelp({option:ProjectOptions,description:ProjectOptionsDescription},{options:["option"]}),"",CommandlineHelpTitle.projectType,commandLineHelp({projectType:Project,description:ProjectDescription,example:ProjectExample})].join(StringConstant.newline)}const args$2=new Args,{2:commandArg}=args$2.raw,currentCommand=Command[commandArg],commands={[Command.help]:help,[Command.project]:project$1},command=commands[currentCommand]||ignore;command();
//# sourceMappingURL=vamtiger.js.map
